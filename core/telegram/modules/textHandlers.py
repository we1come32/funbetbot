from io import StringIO

from aiogram import types
from aiogram.dispatcher import filters
from aiogram.types import KeyboardButton, Message, ReplyKeyboardMarkup, ForceReply
from aiogram.utils import exceptions
from django.utils import timezone

import config
from core.telegram import dp, bot
from data import models
from utils.decorators import RegisterMessageUser, FixParameterTypes
from .keyboards import *


cache = {}


async def team_moderation(message_id: int, flag: bool, call: types.CallbackQuery):
    try:
        await bot.delete_message(chat_id=config.CHAT_ID, message_id=message_id)
    except exceptions.BadRequest:
        return
    application: models.models.QuerySet = models.TeamModeration.objects.filter(
        message_id=message_id)
    if len(application):
        application: models.TeamModeration = application[0]
        if flag:
            if application.name.team.names.filter(name=application.name.name, verified=True).count() == 0:
                application.name.verified = True
                application.name.save()
                application.delete()
            else:
                application.name.delete()
        else:
            application.name.denied = True
            application.name.save()
            application.delete()
        text = "–°–ø–∞—Å–∏–±–æ, —É—á—Ç–µ–Ω–æ"
    else:
        text = "–°–ø–∞—Å–∏–±–æ, —ç—Ç–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Ä–∞–Ω–µ–µ"
    await call.answer(text=text, show_alert=True)


@dp.message_handler(commands=['start'])
async def start_function(msg: Message, **kwargs):
    if msg.text != '/start':
        payload = msg.text.replace('/start ', '')
        if payload.startswith('event'):
            eventID = payload[5:]
            try:
                eventID = int(eventID)
                event = models.Event.objects.get(pk=eventID)
                if event.ended or event.start_time < timezone.now() or event.sports_ru_link == '':
                    raise ValueError
                kwargs = {'category': event.tournament.subcategory.category.pk,
                          'subcategory': event.tournament.subcategory.pk,
                          'tournament': event.tournament.pk,
                          'event': event.pk}
                return await get_bet(msg, **kwargs)
            except [ValueError, models.Event.DoesNotExist]:
                pass
        elif payload.startswith('user'):
            pass
    kb = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    kb.add(KeyboardButton("–ú–µ–Ω—é"))
    kb.add(InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É"))
    c = models.TGUser.objects.filter(id=msg.from_user.id).count()
    if c == 0:
        user = models.TGUser.objects.create(id=msg.from_user.id)
        user.save()
        await msg.answer(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–Ø –±–æ—Ç, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–ø–æ—Ä—Ç.\n–°—Ç–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –º–æ—é –≤–∞–ª—é—Ç—É - üí¥. '
            '\n–î–ª—è —Å—Ç–∞—Ä—Ç–∞ —è –¥–∞–º —Ç–µ–±–µ üí¥ 1000, –¥–∞–ª—å—à–µ —É–∂–µ —Å–∞–º. –°–¥–µ–ª–∞–π —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Å—Ç–∞–≤–∫—É, —Ç–æ–ª—å–∫–æ –Ω–µ –æ—à–∏–±–∏—Å—å, '
            '–≤–∞–ª—é—Ç–∞ –Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è.',
            reply_markup=kb
        )
    else:
        await msg.answer(
            '–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –º–æ–µ–π —Å–∏—Å—Ç–µ–º–µ, —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n\n–° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø—Ä–∏–º—É —Ç–≤–æ—é —Å—Ç–∞–≤–∫—É –Ω–∞ —Å–ø–æ—Ä—Ç',
            reply_markup=kb
        )


@dp.message_handler(commands=['menu', '–º–µ–Ω—é'])
@RegisterMessageUser
async def menu(msg: Message, user: models.TGUser, **kwargs):
    await bot.send_message(user.id, "–ñ–¥—É –≤–∞—à–µ–π —Å—Ç–∞–≤–∫–∏", reply_markup=menuKeyboard)


@dp.message_handler(commands=['balance', '–±–∞–ª–∞–Ω—Å'])
@RegisterMessageUser
async def balance(user: models.TGUser, msg: Message = None, message_id: int = None, **kwargs):
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton('üí¥ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É', callback_data='commands.bet')]])
    if models.Bet.objects.filter(user=user, is_active=True, payed=False).count() == 0 and user.balance <= 500:
        kb.row(InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É', callback_data='commands.player.balance.add'))
    await bot.send_message(user.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å: üí¥ {user.balance}", reply_markup=kb)


@RegisterMessageUser
@dp.message_handler(commands=['add_balance', '–¥–æ–±–∞–≤–∏—Ç—å_–±–∞–ª–∞–Ω—Å'])
async def addBalance(user: models.TGUser, msg: Message = None, message_id: int = None, **kwargs):
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton('üí¥ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É', callback_data='commands.bet')]])
    if models.Bet.objects.filter(user=user, is_active=True, payed=False).count() == 0 and user.balance <= 500:
        user.balance += 500
        user.save()
        message = "‚ùï –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ üí¥ 500\n"
    else:
        message = ""
    await bot.send_message(user.id, f"{message}–í–∞—à –±–∞–ª–∞–Ω—Å: üí¥ {user.balance}", reply_markup=kb,
                           parse_mode=types.ParseMode.HTML,)


@dp.message_handler(commands=['rating', '—Ä–µ–π—Ç–∏–Ω–≥'])
@RegisterMessageUser
async def rating(user: models.TGUser, msg: Message = None, message_id: int = None, **kwargs):
    message = "–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤:\n"
    users: list[models.TGUser] = models.TGUser.objects.filter().order_by('-balance').all()
    flag = True
    for number, _ in enumerate(users[:10]):
        _user = await bot.get_chat(_.id)
        _user = _user.values.get('username', f'user{_.id}')
        if _.id == user.id:
            flag = False
        message += f"\n{number+1}) {_user} - {_.balance}"
    if flag:
        message += f"\n\n–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ - {1 + users.index(user)}"
    await bot.send_message(user.id, message, reply_markup=menuKeyboard)


@dp.message_handler(commands=['bets', '—Å—Ç–∞–≤–∫–∏'])
@RegisterMessageUser
async def bets(user: models.TGUser, msg: Message = None, message_id: int = None, **kwargs):
    def get_info(item: models.Bet, active: bool = False) -> str:
        team: str = item.team.team.get_name()
        if team != '–ù–∏—á—å—è':
            team = f"–ü–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã {team}"
        if active:
            if not item.is_active or item.payed:
                return ""
        _header = f"–°—Ç–∞–≤–∫–∞#{item.pk}"
        if item.is_active is False:
            _header += " (–û—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)"
        if item.payed:
            _header += " (–û–ø–ª–∞—á–µ–Ω–æ)"
        return f"{_header}\n" \
               f"- –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {item.team.event.tournament.subcategory.category.name!r}\n" \
               f"- –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {item.team.event.tournament.subcategory.name!r}\n" \
               f"- –¢—É—Ä–Ω–∏—Ä: {item.team.event.tournament.name!r}\n" \
               f"- –°–æ–±—ã—Ç–∏–µ: {item.team.event.name!r}\n" \
               f"- –ò—Å—Ö–æ–¥ –Ω–∞ {team!r} —Å –∫–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º {bet.value}\n" \
               f"- –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è: {item.team.event.start_time}\n" \
               f"- –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {item.created_date}\n\n"

    header = "<b>–í–∞—à–∏ —Å—Ç–∞–≤–∫–∏:</b>\n\n"
    message = ""
    queryBets = models.Bet.objects.filter(user=user).order_by('-pk')
    for bet in queryBets:
        message += get_info(bet)
    if bets:
        file = StringIO(message)
        file.name = f'bets_{user}_{timezone.now()}.txt'
        await bot.send_document(user.id, file)
        message = ""
        for bet in queryBets:
            message += get_info(bet, active=True)
    else:
        header = ""
        message = "–°—Ç–∞–≤–∫–∏ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n–°–¥–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É?"
    await bot.send_message(user.id, header+message, reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton('üí¥ –ë–∞–ª–∞–Ω—Å', callback_data='commands.player.balance')],
                    [InlineKeyboardButton('üí¥ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É', callback_data='commands.bet')],
                ]
            ), parse_mode=types.ParseMode.HTML,)


@dp.message_handler(commands=['get_id'])
@RegisterMessageUser
async def get_id(msg: Message, **kwargs):
    await msg.answer("Your Telegram ID: `{user_id}`".format(user_id=msg.from_user.id))


@dp.message_handler(commands=['make_bet', '—Å–¥–µ–ª–∞—Ç—å_—Å—Ç–∞–≤–∫—É'])
@RegisterMessageUser
async def get_bet(msg: Message, user: models.TGUser = None, **kwargs):
    kb = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    category = kwargs.get('category', None)
    subcategory = kwargs.get('subcategory', None)
    tournament = kwargs.get('tournament', None)
    event = kwargs.get('event', None)
    team = kwargs.get('team', None)
    if category is None:
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π"
        categories = models.Category.objects.all()
        for tmpCategory in categories:
            if tmpCategory.subcategories.filter(tournaments__events__ended=False).count():
                kb.row(InlineKeyboardButton(tmpCategory.name.upper(),
                                            callback_data=f'commands.bet.{tmpCategory.pk}'))
        kb.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                                    callback_data=f'commands.menu'))
    elif subcategory is None:
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π"
        subcategories = models.Category.objects.get(pk=category).subcategories.all()
        for tmpSubCategory in subcategories:
            if tmpSubCategory.tournaments.filter(events__ended=False).count():
                kb.row(InlineKeyboardButton(tmpSubCategory.name.upper(),
                                            callback_data=f'commands.bet.{category}.{tmpSubCategory.pk}'))
        kb.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                    callback_data=f'commands.bet'))
    elif tournament is None:
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä"
        subcategories = models.SubCategory.objects.get(pk=subcategory).tournaments.all()
        for tmpSubCategory in subcategories:
            if tmpSubCategory.events.filter(ended=False).count():
                kb.row(InlineKeyboardButton(tmpSubCategory.name.upper(),
                                            callback_data=f'commands.bet.{category}.{subcategory}.{tmpSubCategory.pk}'))
        kb.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                    callback_data=f'commands.bet.{category}'))
    elif event is None:
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ:"
        subcategories = models.Tournament.objects.get(pk=tournament).events.filter(
            ~models.models.Q(sports_ru_link="") & ~models.models.Q(parimatch_link=""),
            start_time__gte=timezone.now(),
            ended=False)
        for tmpSubCategory in subcategories:
            kb.row(InlineKeyboardButton(tmpSubCategory.name.upper(),
                                        callback_data=f'commands.bet.{category}.{subcategory}.{tournament}.'
                                                      f'{tmpSubCategory.pk}'))
        kb.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                    callback_data=f'commands.bet.{category}.{subcategory}'))
    elif team is None:
        _event: models.Event = models.Event.objects.get(pk=event)
        text = "<u>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤—Å—Ç—Ä–µ—á–∏</u>\n\n"\
               "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–æ–±—ã—Ç–∏—é:\n\n" \
               f"- –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {_event.tournament.subcategory.category.name!r}\n" \
               f"- –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {_event.tournament.subcategory.name!r}\n" \
               f"- –¢—É—Ä–Ω–∏—Ä: {_event.tournament.name!r}\n" \
               f"- –°–æ–±—ã—Ç–∏–µ: {_event.name!r}\n" \
               f"- –î–∞—Ç–∞: {_event.start_time}"
        subcategories = _event.teams.all()
        for tmpSubCategory in subcategories:
            kb.row(InlineKeyboardButton(f"{tmpSubCategory}",
                                        callback_data=f'commands.bet.{category}.{subcategory}.{tournament}.'
                                                      f'{event}.{tmpSubCategory.pk}'))
        kb.row(InlineKeyboardButton(text='üîó PariMatch', url=_event.parimatch_link),
               InlineKeyboardButton(text='üîó Sports.Ru', url=_event.sports_ru_link))
        kb.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                    callback_data=f'commands.bet.{category}.{subcategory}.{tournament}'))
    else:
        text = f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏.\n–ù–∞–ø–æ–º–Ω—é, —É –≤–∞—Å —Å–µ–π—á–∞—Å üí¥ {user.balance}:"
        cache[user.id] = kwargs
        await bot.send_message(user.id, text, reply_markup=ForceReply.create(selective=True))
        return
    try:
        message_id = msg.message.message_id
        await bot.delete_message(user.id, message_id)
    except AttributeError:
        pass
    await bot.send_message(user.id, text, reply_markup=kb, parse_mode=types.ParseMode.HTML)


@dp.message_handler(commands=['settings', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏'])
@RegisterMessageUser
async def player_settings(msg: Message, user: models.TGUser, **kwargs):
    await bot.send_message(user.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –∏–∑–≤–∏–Ω–∏—Ç–µ(")


@dp.message_handler()
@RegisterMessageUser
async def custom_message(msg: Message, user: models.TGUser, **kwargs):
    if msg.reply_to_message:
        data = cache.get(user.id, None)
        if data is None:
            return
        try:
            money = float(msg.text.replace(',', '.'))
            if money - int(money*100)/100:
                raise ValueError
            money = int(money)
            if user.balance < money:
                await bot.send_message(user.id, f"–£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É –Ω–µ—Ç —Ç–∞–∫–æ–π —Å—Ç–∞–≤–∫–∏. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏.\n"
                                                f"–ù–∞–ø–æ–º–Ω—é, —É –≤–∞—Å —Å–µ–π—á–∞—Å üí¥ {user.balance}:",
                                       reply_markup=ForceReply.create(selective=True))
                return
            if money < 100:
                await bot.send_message(user.id, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - üí¥ 100. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏.\n"
                                                f"–ù–∞–ø–æ–º–Ω—é, —É –≤–∞—Å —Å–µ–π—á–∞—Å üí¥ {user.balance}:",
                                       reply_markup=ForceReply.create(selective=True))
                return
        except ValueError:
            await bot.send_message(user.id, f"–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏.\n"
                                            f"–ù–∞–ø–æ–º–Ω—é, —É –≤–∞—Å —Å–µ–π—á–∞—Å üí¥ {user.balance}:",
                                   reply_markup=ForceReply.create(selective=True))
            return
        del cache[user.id]
        team: models.TeamEvent = models.TeamEvent.objects.get(pk=data['team'])
        if bet := team.create_bet(money, user):
            team: str = team.team.get_name()
            if team != '–ù–∏—á—å—è':
                team = f"–ü–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã {team}"
            await bot.send_message(
                user.id,
                f"‚úÖ <b>–°—Ç–∞–≤–∫–∞#{bet.pk} —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–Ω–∞!</b>\n\n"
                f"–ò—Å—Ö–æ–¥ –Ω–∞ {team!r} —Å –∫–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º {bet.value}\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à <b>üí¥ {int(bet.money*bet.value)}</b>\n\n"
                f"<code>–ü–æ–¥—Ä–æ–±–Ω–µ–µ:\n"
                f"- –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {bet.team.event.tournament.subcategory.category.name!r}\n"
                f"- –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {bet.team.event.tournament.subcategory.name!r}\n"
                f"- –¢—É—Ä–Ω–∏—Ä: {bet.team.event.tournament.name!r}\n"
                f"- –°–æ–±—ã—Ç–∏–µ: {bet.team.event.name!r}\n"
                f"- –î–∞—Ç–∞: {bet.team.event.start_time.strftime('%c')}\n"
                f"- –°—Ç–∞–≤–∫–∞#{bet.pk}. –ò—Å—Ö–æ–¥ –Ω–∞ {team!r} —Å –∫–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º {bet.value}</code>",
                parse_mode=types.ParseMode.HTML,
            )
            message = f"–°—Ç–∞–≤–∫–∞#{bet.pk} —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–Ω–∞!\n" \
                      f"–í–∞—à –±–∞–ª–∞–Ω—Å: üí¥ {user.balance}\n" \
                      f"–°–¥–µ–ª–∞–µ–º –µ—â—ë —Å—Ç–∞–≤–∫—É?"
        else:
            message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –±—ã–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.\n" \
                      "–ù–∞–π–¥–µ–º –¥—Ä—É–≥–æ–µ —Å–æ–±—ã—Ç–∏–µ?"
        await bot.send_message(
            user.id,
            message,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton('üí¥ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É', callback_data='commands.bet')]]
            )
        )
    elif msg.text.lower() in ['—Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É']:
        return await get_bet(msg)
    elif msg.text.lower() in ['–Ω–∞—Å—Ç—Ä–æ–π–∫–∏']:
        return await player_settings(msg)
    elif msg.text.lower() in ['—Å—Ç–∞–≤–∫–∏', 'bets']:
        return await bets(msg)
    elif msg.text.lower() in ['rating', '—Ä–µ–π—Ç–∏–Ω–≥']:
        return await rating(msg)
    elif msg.text.lower() in ['–±–∞–ª–∞–Ω—Å', 'balance']:
        return await balance(msg)
    elif msg.text.lower() in ['–º–µ–Ω—é', 'menu']:
        return await menu(msg)
