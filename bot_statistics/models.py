from datetime import timedelta, datetime

from aiogram import types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from django.db import models
from django.db.models import QuerySet, Count
from django.utils import timezone

from data.models import TGUser, Bet, Category, Event
from utils import message_send


class TGProfileStatistic(models.Model):
    user = models.OneToOneField(TGUser, on_delete=models.CASCADE, related_name='statistic', verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    activity = models.BooleanField(default=True, verbose_name='–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')
    last_activity = models.DateField(default=timezone.now, verbose_name='–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')

    def get_current_interesting_events(self, max_count: int = None) -> list[Event]:
        """
        –§—É–Ω–∫—Ü–∏—è —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å—Ç–∞–≤–∫–∞–º –∑–∞ 4 –º–µ—Å—è—Ü–∞ –∏ –≤—ã–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π,
        –ø–æ –∫–æ—Ç–æ—Ä—ã–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Å—Ç–∞–≤–∫–∏
        :return: –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏—è–º
        """
        if max_count is None:
            max_count = 10
        start_date = timezone.now()-timedelta(days=120)

        # –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫–∏ –∑–∞ –±–ª–∏–∂–∞–π—à–∏–µ 120 –¥–Ω–µ–π
        categories = Category.objects.filter(
            subcategories__tournaments__events__teams__bets__created_date__gte=start_date,
            user=self.user
        )
        categories_list = list(categories)

        # –°—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –±–ª–∏–∂–∞–π—à–∏–µ 120 –¥–Ω–µ–π
        bets: QuerySet[Bet] = self.user.user.bets.filter(created_date__gte=start_date)

        # –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Å–æ–±—ã—Ç–∏—è–º
        unique_categories_dict: dict[Category, dict] = {}
        for category in set(categories):
            unique_categories_dict[category] = {'count': categories_list.count(category),
                                                'bets': {'list': [], 'wins': 0, 'loses': 0, 'not_ended': 0}}
        for bet in bets:
            unique_categories_dict[bet.team.event.tournament.subcategory.category]['bets']['list'].append(bet)
            if bet.payed:
                if bet.winner:
                    unique_categories_dict[bet.team.event.tournament.subcategory.category]['bets']['wins'] += 1
                else:
                    unique_categories_dict[bet.team.event.tournament.subcategory.category]['bets']['loses'] += 1
            else:
                unique_categories_dict[bet.team.event.tournament.subcategory.category]['bets']['not_ended'] += 1
        unique_categories = list(set(categories))
        unique_categories.sort(key=lambda categoty: unique_categories_dict[category]['count'], reverse=True)
        count = max_count / min(3, len(unique_categories)) + 1
        interesting_events: list[Event] = []

        # –ü–æ–¥–±–æ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π
        c: int = 0
        for category in unique_categories[:3]:
            events: QuerySet[Event] = Event.objects.filter(~models.Q(sports_ru_link=''), ~models.Q(parimatch_link=''),
                                                         start_time__gte=timezone.now() + timedelta(hours=3),
                                                         tournament__subcategory__categoty=category, )
            for event in events[:count]:
                if c < max_count:
                    c += 1
                    interesting_events.append(event)
        return interesting_events


class Activity(models.Model):
    date = models.DateField(default=timezone.now, verbose_name='–î–∞—Ç–∞', unique=True)
    telegram = models.IntegerField(default=0, verbose_name='Telegram')

    @classmethod
    def update(cls):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É —Å–∏—Å—Ç–µ–º—ã
        :return:
        """
        kb = InlineKeyboardMarkup(resize_keyboard=True, inline_keyboard=[[
            InlineKeyboardButton(text='üí¥ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É', callback_data='commands.bet'),
        ], [
            InlineKeyboardButton(text='üí¥ –ë–∞–ª–∞–Ω—Å', callback_data='commands.player.balance'),
            InlineKeyboardButton(text='üî• –†–µ–π—Ç–∏–Ω–≥', callback_data='commands.rating'),
        ]])
        users: QuerySet[TGProfileStatistic] = TGProfileStatistic.objects.filter(last_activity__lte=timezone.now() - timedelta(days=13, hours=20))
        for user in users:
            message_send(
                chat_id=user.user.user_id,
                text="–ü—Ä–∏–≤–µ—Ç! –û—Ç —Ç–µ–±—è –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ú–æ–∂–µ—Ç, —Å–¥–µ–ª–∞–µ–º –µ—â—ë –æ–¥–Ω—É —Å—Ç–∞–≤–∫—É? "
                     "–ö–∞–∫ —Ä–∞–∑ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–µ–±—è",
                reply_markup=kb,
                disable_notification=True,
                parse_mode=types.ParseMode.HTML
            )
            user.activity = False
            user.save()
        try:
            cls.objects.get(date=timezone.now)
        except (cls.DoesNotExist):
            cls.objects.create(telegram=TGProfileStatistic.objects.filter(activity=True).count())
